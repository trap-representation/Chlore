set EINIT 1    ;Heap isn't initialized.
set EALIGN 2   ;Cannot align the memory to the requested alignment.
set EINT 3     ;One of the internal functions that this library uses to allocate memory has encountered some kind of error. In case of this error, the best option is to terminate the program, or you can also unload and reload the library and reinitialize it. It'll result in a memory leak in both of the cases.
set EOVF 4     ;The requested amount of memory is more than what's been allocated for the VM.

/ On success: Pushes an (explicit) pointer to a chunk of memory in the heap of size [top-1] bytes, and aligned to a [top] bytes boundary on the [top] of the stack.
  On failure: Returns one of EINIT, EALIGN, EINT, EOVF.
              Pushes an unspecified value on the top of the stack.
/

:hidden$std_alloc2_aaseg blks
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_aaseg_f
	loadf
	str0
	-> 2 invoke -> 1
	& lfr0
	ret
blke

:std_alloc2_aaseg! {
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_aaseg_f
	loadf
	-> 2 invoke -> 1
}

rbs
:hidden$std_alloc2_aaseg_f blks dat str "aaseg" blke
rbe

/ On success: Pushes an (explicit) pointer to a chunk of memory in the heap of size [top] bytes on the [top] of the stack.
  On failure: Returns one of EINIT, EINT, EOVF.
              Pushes an unspecified value on the top of the stack.
/

:hidden$std_alloc2_aseg blks
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_aseg_f
	loadf
	swap
	-> 1 invoke -> 1
	swap
	ret
blke

:std_alloc2_aseg! {
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_aseg_f
	loadf
	-> 1 invoke -> 1
}

rbs
:hidden$std_alloc2_aseg_f blks dat str "aseg" blke
rbe

/ On success: Flushes the chunk of memory pointed at by the [top-1] of the stack, and pushes an (explicit) pointer to a chunk of memory of size [top-2] bytes, aligned to a [top] byte boundary, and which retains the contents of the original chunk, on the [top] of the stack.
  On failure: Returns one of EINIT, EALIGN, EINT, EOVF.
              Pushes an unspecified value on the top of the stack.
/

:hidden$std_alloc2_arseg blks
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_arseg_f
	loadf
	str0
	-> 3 invoke -> 1
	& lfr0
	ret
blke

:std_alloc2_arseg! {
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_arseg_f
	loadf
	-> 3 invoke -> 1
}

rbs
:hidden$std_alloc2_arseg_f blks dat str "arseg" blke
rbe

/ On success: Flushes the chunk of memory pointed at by the [top] of the stack, and pushes an (explicit) pointer to a chunk of memory of size [top-1] bytes, and which retains the contents of the original chunk, on the [top] of the stack.
  On failure: Returns one of EINIT, EINT, EOVF.
              Pushes an unspecified value on the top of the stack.
/

:hidden$std_alloc2_rseg blks
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_rseg_f
	loadf
	str0
	-> 2 invoke -> 1
	& lfr0
	ret
blke

:std_alloc2_rseg! {
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_rseg_f
	loadf
	-> 2 invoke -> 1
}

rbs
:hidden$std_alloc2_rseg_f blks dat str "rseg" blke
rbe

/ On success: Flushes the chunk of memory pointed at by the [top] of the stack. [top] must be an (explicit) pointer returned by one of `aseg', `aaseg', `rseg', `arseg'.
  On failure: Returns EINIT.
/

:hidden$std_alloc2_flush blks
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_flush_f
	loadf
	swap
	-> 1 invoke
	ret
blke

:std_alloc2_flush! {
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_flush_f
	loadf
	-> 1 invoke
}

rbs
:hidden$std_alloc2_flush_f blks dat str "flush" blke
rbe

/ On success: Frees up all the additional memory allocated by this library.
  On failure: Returns EINIT.
/

:hidden$std_alloc2_close blks
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_close_f
	loadf
	invoke
	ret
blke

:std_alloc2_close! {
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_close_f
	loadf
	invoke
}

rbs
:hidden$std_alloc2_close_f blks dat str "close" blke
rbe

/ On success: Dumps the current VM heap state to stdout.
  On failure: Returns EINIT.
/

:hidden$std_alloc2_dump blks
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_dump_f
	loadf
	invoke
	ret
blke

:std_alloc2_dump! {
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_dump_f
	loadf
	invoke
}

rbs
:hidden$std_alloc2_dump_f blks dat str "dump" blke
rbe

/ On success: Initializes the heap. Must be called before anything in this library is used.
  On failure: Returns EINT.
/

:hidden$std_alloc2_init blks
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_init_f
	loadf
	invoke
	ret
blke

:std_alloc2_init! {
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_init_f
	loadf
	invoke
}

rbs
:hidden$std_alloc2_init_f blks dat str "init" blke
rbe

/ Writes the cache hits and misses to stdout. /

:hidden$std_alloc2_prof blks
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_prof_f
	loadf
	invoke
	ret
blke

:std_alloc2_prof! {
	pushi64 std_alloc2
	loadl
	pushi64 std_alloc2_prof_f
	loadf
	invoke
}

rbs
:hidden$std_alloc2_prof_f blks dat str "prof" blke
rbe

rbs
:hidden$std_alloc2 dat str "./lib/bin/alloc2.so"
rbe
