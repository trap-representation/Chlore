This work is licensed under the Creative Commons Attribution-NoDerivatives 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nd/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.

[Notation]:

A colon (:) following a non-terminal introduces its definition. Terminals are enclosed in backticks (`). Alternative definitions are listed on separate lines, except when prefaced by the words "one of". An optional symbol is indicated by the suffix " (opt)".

----

[Lexical grammar]

token:
  keyword
  punctuator
  identifier
  numeric-constant
  character-constant
  string-constant

keyword: one of
    `addc` `addi` `addl` `addp`
    `adds` `adduc` `addui` `addus`
    `alignof` `aloadc` `aloadi` `aloadl`
    `aloadp` `aloads` `aloaduc` `aloadui`
    `aloadus` `andc` `andi` `andl`
    `ands` `anduc` `andui` `andus`
    `astorec` `astorei` `astorel` `astorep`
    `astores` `astoreuc` `astoreui` `astoreus`
    `c` `call` `copy` `decsp`
    `divc` `divi` `divl` `divs`
    `divuc` `divui` `divus` `dup`
    `else` `eq` `exit` `exposed`
    `force_panic` `ge` `get0` `get1`
    `get2` `get3` `get4` `get5`
    `get6` `get7` `gt` `hidden`
    `hlt` `hltr` `i` `if`
    `import` `incsp` `invoke` `l`
    `le` `loadc` `loadi` `loadl`
    `loadp` `loads` `loaduc` `loadui`
    `loadus` `ls` `lshc` `lshi`
    `lshl` `lshs` `lshuc` `lshui`
    `lshus` `mulc` `muli` `mull`
    `muls` `muluc` `mului` `mulus`
    `ne` `notc` `noti` `notl`
    `nots` `notuc` `notui` `notus`
    `nz` `open` `orc` `ori`
    `orl` `ors` `oruc` `orui`
    `orus` `over` `p` `panic`
    `pcopy` `pop` `popa` `pushc`
    `pushcs` `pushi` `pushl` `pushlt`
    `pushp` `pushpc` `pushs` `pushsp`
    `pushuc` `pushui` `pushus` `put`
    `rcall` `remc` `remi` `reml`
    `rems` `remuc` `remui` `remus`
    `ret` `rshc` `rshi` `rshl`
    `rshs` `rshuc` `rshui` `rshus`
    `s` `set` `sizeof` `storec`
    `storei` `storel` `storep` `stores`
    `storeuc` `storeui` `storeus` `struct`
    `subc` `subi` `subl` `subp`
    `subs` `subuc` `subui` `subus`
    `swap` `uc` `ui` `us`
    `valoadc` `valoadi` `valoadl` `valoadp`
    `valoads` `valoaduc` `valoadui` `valoadus`
    `vastorec` `vastorei` `vastorel` `vastorep`
    `vastores` `vastoreuc` `vastoreui` `vastoreus`
    `vget0` `vget1` `vget2` `vget3`
    `vget4` `vget5` `vget6` `vget7`
    `vloadc` `vloadi` `vloadl` `vloadp`
    `vloads` `vloaduc` `vloadui` `vloadus`
    `vstorec` `vstorei` `vstorel` `vstorep`
    `vstores` `vstoreuc` `vstoreui` `vstoreus`
    `vwrite0` `vwrite1` `vwrite2` `vwrite3`
    `vwrite4` `vwrite5` `vwrite6` `vwrite7`
    `write0` `write1` `write2` `write3`
    `write4` `write5` `write6` `write7`
    `xorc` `xori` `xorl` `xors`
    `xoruc` `xorui` `xorus` `zr`

decimal-digit: one of
  `0` `1` `2` `3`
  `4` `5` `6` `7`
  `8` `9`

decimal-constant:
  decimal-digit
  decimal-digit decimal-constant

octal-digit: one of
  `0` `1` `2` `3`
  `4` `5` `6` `7`

octal-digit-sequence:
  octal-digit
  octal-digit octal-digit-sequence

octal-constant:
  `0o` octal-digit-sequence

hexadecimal-digit: one of
  `0` `1` `2` `3`
  `4` `5` `6` `7`
  `8` `9` `a` `b`
  `c` `d` `e` `f`
  `A` `B` `C` `D`
  `E` `F`

hexadecimal-digit-sequence:
  hexadecimal-digit
  hexadecimal-digit hexadecimal-digit-sequence

hexadecimal-constant:
  `0x` hexadecimal-digit-sequence

binary-digit: one of
  `0` `1`

binary-digit-sequence:
  binary-digit
  binary-digit binary-digit-sequence

binary-constant:
  `0b` binary-digit-sequence

numeric-constant:
  decimal-constant
  octal-constant
  binary-constant
  hexadecimal-constant

character-constant:
  `'` character-sequence-character (opt) `'`

character-sequence-character:
  character-character
  character-character character-sequence-character

character-character:
  any member of the source character set except the `'`, the `\` character, and the newline character
  escape-sequence

string-constant:
  `"` character-sequence-string (opt) `"`

character-sequence-string:
  character-string
  character-string character-sequence-string

character-string:
  any member of the source character set except the `"`, the `\` character, and the newline character
  escape-sequence

escape-sequence:
  `\` escape-character

escape-character:
  any member of the source character set

identifier:
  identifier-nondigit character-sequence-identifier (opt)

character-sequence-identifier:
  character-identifier
  character-identifier character-sequence-identifier

identifier-nondigit: one of
  `a` `b` `c` `d`
  `e` `f` `g` `h`
  `i` `j` `k` `l`
  `m` `n` `o` `p`
  `q` `r` `s` `t`
  `u` `v` `w` `x`
  `y` `z` `A` `B`
  `C` `D` `E` `F`
  `G` `H` `I` `J`
  `K` `L` `M` `N`
  `O` `P` `Q` `R`
  `S` `T` `U` `V`
  `W` `X` `Y` `Z`
  `_` `?` `@`

character-identifier: one of
  `a` `b` `c` `d`
  `e` `f` `g` `h`
  `i` `j` `k` `l`
  `m` `n` `o` `p`
  `q` `r` `s` `t`
  `u` `v` `w` `x`
  `y` `z` `A` `B`
  `C` `D` `E` `F`
  `G` `H` `I` `J`
  `K` `L` `M` `N`
  `O` `P` `Q` `R`
  `S` `T` `U` `V`
  `W` `X` `Y` `Z`
  `0` `1` `2` `3`
  `4` `5` `6` `7`
  `8` `9` `_` `?`
  `@`

punctuator:
  `:` `-` `+` `.`
  `.` `{` `}` `(`
  `)`

[Phrase structure grammar]

translation-unit:
  statement-sequence (opt)

statement-sequence:
  statement
  statement statement-sequence

statement:
  keyword
  push-statement
  alignof-statement
  sizeof-statement
  set-statement
  label
  import-statement
  struct-definition
  tagged-statement
  instruction
  selection-statement

instruction: one of
    `addc` `addi` `addl` `addp`
    `adds` `adduc` `addui` `addus`
    `aloadc` `aloadi` `aloadl` `aloadp`
    `aloads` `aloaduc` `aloadui` `aloadus`
    `andc` `andi` `andl` `ands`
    `anduc` `andui` `andus` `astorec`
    `astorei` `astorel` `astorep` `astores`
    `astoreuc` `astoreui` `astoreus` `call`
    `copy` `decsp` `divc` `divi`
    `divl` `divs` `divuc` `divui`
    `divus` `dup` `eq` `exit`
    `force_panic` `ge` `get0` `get1`
    `get2` `get3` `get4` `get5`
    `get6` `get7` `gt` `hlt`
    `hltr` `incsp` `invoke` `le`
    `loadc` `loadi` `loadl` `loadp`
    `loads` `loaduc` `loadui` `loadus`
    `ls` `lshc` `lshi` `lshl`
    `lshs` `lshuc` `lshui` `lshus`
    `mulc` `muli` `mull` `muls`
    `muluc` `mului` `mulus` `ne`
    `notc` `noti` `notl` `nots`
    `notuc` `notui` `notus` `nz`
    `open` `orc` `ori` `orl`
    `ors` `oruc` `orui` `orus`
    `over` `panic` `pcopy` `pop`
    `popa` `pushc` `pushcs` `pushi`
    `pushl` `pushlt` `pushp` `pushpc`
    `pushs` `pushsp` `pushuc` `pushui`
    `pushus` `put` `rcall` `remc`
    `remi` `reml` `rems` `remuc`
    `remui` `remus` `ret` `rshc`
    `rshi` `rshl` `rshs` `rshuc`
    `rshui` `rshus` `storec` `storei`
    `storel` `storep` `stores` `storeuc`
    `storeui` `storeus` `subc` `subi`
    `subl` `subp` `subs` `subuc`
    `subui` `subus` `swap` `valoadc`
    `valoadi` `valoadl` `valoadp` `valoads`
    `valoaduc` `valoadui` `valoadus` `vastorec`
    `vastorei` `vastorel` `vastorep` `vastores`
    `vastoreuc` `vastoreui` `vastoreus` `vget0`
    `vget1` `vget2` `vget3` `vget4`
    `vget5` `vget6` `vget7` `vloadc`
    `vloadi` `vloadl` `vloadp` `vloads`
    `vloaduc` `vloadui` `vloadus` `vstorec`
    `vstorei` `vstorel` `vstorep` `vstores`
    `vstoreuc` `vstoreui` `vstoreus` `vwrite0`
    `vwrite1` `vwrite2` `vwrite3` `vwrite4`
    `vwrite5` `vwrite6` `vwrite7` `write0`
    `write1` `write2` `write3` `write4`
    `write5` `write6` `write7` `xorc`
    `xori` `xorl` `xors` `xoruc`
    `xorui` `xorus` `zr`

type:
  `c` `i` `l` `p`
  `s` `uc` `ui` `us`

alignof-statement:
  `alignof` type
  `alignof` struct-name

sizeof-statement:
  `sizeof` type
  `sizeof` struct-name

push-instruction: one of
  `pushi` `pushl` `pushp` `pushs`
  `pushuc` `pushui`

sign:
  `+`
  `-`

else-clause:
  `else` `{` statement-sequence (opt) `}`
  `else` statement

selection-statement:
  `if` `(` statement-sequence (opt) `)` `{` statement-sequence (opt) `}` else-clause (opt)
  `if` `(` statement-sequence (opt) `)` statement else-clause (opt)

push-statement:
  push-instruction sign (opt) numeric-constant
  push-instruction sign (opt) character-constant
  push-instruction sign (opt) string-constant
  push-instruction sign (opt) symbol

set-statement:
  `set` identifier sign (opt) numeric-constant
  `set` identifier sign (opt) character-constant
  `set` identifier sign (opt) string-constant
  `set` identifier sign (opt) symbol

visibility:
  `hidden`
  `exposed`

label:
  `:` visibility (opt) identifier

import-statement:
  `import` string-constant

tag:
  identifier

symbol:
  identifier

struct-name:
  identifier

struct-tag-definition:
  type `:` identifier
  struct-name `:` identifier

struct-tag-definition-sequence:
  struct-tag-definition struct-tag-definition-sequence (opt)

struct-definition:
  `struct` identifier struct-tag-definition-sequence (opt) `!`

tag-sequence:
  `.` tag tag-sequence (opt)

tagged-statement:
  `+` struct-name tag-sequence (opt)
