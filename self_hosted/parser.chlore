    ;(WIP) Parser for the Chlore programming language written in Chlore
/   Copyright (C) 2022  Somdipto Chakraborty

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
/


/ register def:
  7 -> head of the tokens list
  0 -> current token in the tokens list
  1 -> root of the IR
  2 -> current node in the IR
/

:close_resources_and_quit_parser (
	pushuc 1 pushuc 0 %alloc_close
	pushuc 0 !
	& ldr0 &
	hltr
)

:err_message_failed_alloc_parser dat str "MChlore (error): failed to allocate memory\n"
:failed_alloc_parser (
	pushuc 0 pushuc 0 %putstre
	pushp err_message_failed_alloc_parser ptr_code
	pushuc 0 !
	pushp close_resources_and_quit_parser jmp
)

:create_node_translation_unit {
       pushl SIZEOF_UI ;node type
       pushl SIZEOF_P ;implicit pointer to go down a level
       pushl SIZEOF_UI ;node type of the node down a level
       addl addl
       pushuc 1 !
       & ldr0 & pushp failed_alloc_parser jnz
       ep2ip
}

:init_node_translation_unit {
       pushui node_translation_unit over %translation_unit->node_type sthui
       pushp NULL over %translation_unit->down sthp
       pushui node_btrans over %translation_unit->down_node_type sthui
}

:translation_unit->node_type { }

:translation_unit->down {
       pushl SIZEOF_UI addp
}

:translation_unit->down_node_type {
       pushl SIZEOF_UI pushl SIZEOF_P addl addp
}

:create_node_symbol {
       pushl SIZEOF_UI ;node type
       pushl SIZEOF_P ;implicit pointer to go up a level
       pushl SIZEOF_P ;implict pointer to the next node
}

:init_node_symbol {
       pushui node_symbol over %symbol->node_type
       pushp NULL
}

:parse (
       & ldr7 & %token->next_token & ldhp & str0 ;save an implicit pointer to the token next to the head of the token list in GPR0
       %create_node_translation_unit
       %init_node_translation_unit
       dup str1 ;save it as the root of the IR
       str2 ;save it as the current node of the IR too
       pushp parse_translation_unit call
)

:parse_translation_unit (
       & ldr0 &
       dup %token->token_code & ldhuc & pushuc tk_symbol pushp ss_translation_unit-->parse_symbol jeq

       :ss_translation_unit-->parse_symbol
       pop
       pushui node_symbol & lfr2 & %translation_unit->down_node_type sthui
)

:parse_symbol (
       %create_node_symbol
)
