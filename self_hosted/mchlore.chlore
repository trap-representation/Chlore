; [WIP] Compiler for the Chlore programming language written in Chlore

import "./lib/import/io.chloreh"
import "./lib/import/alloc2.chloreh"
import "./lib/import/shorthand.chloreh"
import "./lib/import/types.chloreh"
import "./lib/import/stddef.chloreh"
import "./lib/import/string.chloreh"
import "./self_hosted/lexer.chlore"

:initialize_before_lex (
       pushuc 1 pushuc 0 %alloc_init
       pushuc 0 ! ;initialize the heap
       pushuc 1 pushuc 1 %aseg
       pushuc 1 pushuc 2 %rseg
       pushuc 1 pushuc 4 %flush
       pushuc 2 pushuc 3 %strcmp

       ret
)

:file dat str "./self_hosted/a.chlore"

:main (
      pushuc 0 %std_io
      pushuc 1 %std_alloc2
      pushuc 2 %std_string

      pushp initialize_before_lex call
 
      pushuc 0 pushuc 0 %openf
      pushp file ptr_code
      pushui O_RDONLY
      pushuc 0 ! ;open input file
      pushi -1 pushp perror_panic jeq ;force_panic if there's any error. There will be no memory leak, since we haven't allocated any memory yet
      pushp file ptr_code
      pushp lex call

      pushp parse call

      ;the top of the stack has the file descriptor of the opened file
      pushuc 0 pushuc 0 %closef
      pushuc 0 !

      pushuc 1 pushuc 0 %alloc_close
      pushuc 0 !

      pushp print_tokens call

      hlt
)
